package sparse

import "fmt"

type (
	// ParserFunc defines a stateless parser. It consumes the input
	// text in a scanner and returns the unconsumed input, the matched
	// node, and an optional error.
	ParserFunc func(s Scanner) (next Scanner, node Node, err error)

	// Parser is the stateful counterpart of ParserFunc.
	Parser interface {
		Parse(s Scanner) (next Scanner, node Node, err error)
	}

	// Node is a node a of the AST that is generated by the parsers.
	Node interface {
		fmt.Stringer
		// Equals compares if the current node and the passed one have
		// equal values. The parsers implemented in the sparse/parsers
		// package don't take into account the position.
		Equals(Node) bool
		// Position returns the line and column of the first character
		// consumed by the parser that created this node.
		Position() (int, int)
	}

	// NodeBuilder is the interface that wraps the methods for the
	// incremental creation of nodes, such as arrays and trees.
	NodeBuilder interface {
		Build() Node
		Add(Node)
		Reset()
	}
)

// Error is a parser that won't consume any input and will always
// return the error err.
func Error(err error) ParserFunc {
	return func(s Scanner) (Scanner, Node, error) {
		return s, nil, err
	}
}
